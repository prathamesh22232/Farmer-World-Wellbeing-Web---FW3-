import React, { useState } from "react";
import { useNavigate, Link } from "react-router-dom"; // <-- FIXED: Link is now imported
import { FireIcon, CheckCircleIcon, XCircleIcon, ArrowRightIcon } from '@heroicons/react/24/solid';

// --- INTERNAL HEADER COMPONENT (Stronger Branding) ---
const AppHeader = () => {
Â  Â  return (
Â  Â  Â  Â  <header className="bg-green-700 text-white shadow-xl sticky top-0 z-10">
Â  Â  Â  Â  Â  Â  <div className="max-w-7xl mx-auto py-4 px-6 sm:px-8 lg:px-10 flex justify-between items-center">
Â  Â  Â  Â  Â  Â  Â  Â  <div className="text-2xl font-bold tracking-wider flex items-center">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <span className="text-white">Ministry of Agriculture</span> <span className="ml-2 text-yellow-300">ðŸŒ¾</span>
Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  <nav className="hidden sm:flex space-x-6 text-white">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {/* Refactored <a> to use Link component for SPA navigation */}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <Link to="/dashboard" className="hover:text-green-300 transition duration-150 font-medium">Dashboard</Link>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <Link to="/reports" className="hover:text-green-300 transition duration-150 font-medium">Reports</Link>
Â  Â  Â  Â  Â  Â  Â  Â  </nav>
Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  </header>
Â  Â  );
};
// --- INTERNAL FOOTER COMPONENT ---
const AppFooter = () => {
Â  Â  return (
Â  Â  Â  Â  <footer className="bg-green-900 text-white mt-auto">
Â  Â  Â  Â  Â  Â  <div className="max-w-7xl mx-auto py-6 px-6 sm:px-8 lg:px-10 text-center text-sm border-t border-green-800">
Â  Â  Â  Â  Â  Â  Â  Â  <p>&copy; {new Date().getFullYear()} Government Farmer Assistance Portal. All rights reserved.</p>
Â  Â  Â  Â  Â  Â  Â  Â  <p className="mt-1 text-green-300">Secure Data Protocol. For Government Use Only.</p>
Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  </footer>
Â  Â  );
};
// ---------------------------------------------------------------------------------


const GovAssistance = () => {
Â  Â  const navigate = useNavigate();
Â  Â  
Â  Â  // State to hold form inputs
Â  Â  const [village, setVillage] = useState("");
Â  Â  const [disasterType, setDisasterType] = useState("");
Â  Â  const [severity, setSeverity] = useState("Medium"); 
Â  Â  
Â  Â  // State for managing the API response and loading status
Â  Â  const [triggerResponse, setTriggerResponse] = useState(null);
Â  Â  const [loading, setLoading] = useState(false);

Â  Â  // Function to handle the form submission and API call
Â  Â  const handleTrigger = async (e) => {
Â  Â  Â  Â  e.preventDefault();
Â  Â  Â  Â  setLoading(true);
Â  Â  Â  Â  setTriggerResponse(null);

Â  Â  Â  Â  const triggerData = { village, disasterType, severity };

Â  Â  Â  Â  try {
Â  Â  Â  Â  Â  Â  const response = await fetch('http://localhost:3001/api/emergency-trigger', {
Â  Â  Â  Â  Â  Â  Â  Â  method: 'POST',
Â  Â  Â  Â  Â  Â  Â  Â  headers: {
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  'Content-Type': 'application/json',
Â  Â  Â  Â  Â  Â  Â  Â  },
Â  Â  Â  Â  Â  Â  Â  Â  body: JSON.stringify(triggerData),
Â  Â  Â  Â  Â  Â  });

Â  Â  Â  Â  Â  Â  const result = await response.json();

Â  Â  Â  Â  Â  Â  if (response.ok) {
Â  Â  Â  Â  Â  Â  Â  Â  setTriggerResponse({ 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  success: true, 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  ...result, 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  village, 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  disasterType 
Â  Â  Â  Â  Â  Â  Â  Â  });
Â  Â  Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  Â  Â  // Clear form fields after success
Â  Â  Â  Â  Â  Â  Â  Â  setVillage("");
Â  Â  Â  Â  Â  Â  Â  Â  setDisasterType("");
Â  Â  Â  Â  Â  Â  Â  Â  setSeverity("Medium");

Â  Â  Â  Â  Â  Â  } else {
Â  Â  Â  Â  Â  Â  Â  Â  setTriggerResponse({ success: false, message: result.message || 'Server error.' });
Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  } catch (error) {
Â  Â  Â  Â  Â  Â  console.error('Network Error:', error);
Â  Â  Â  Â  Â  Â  setTriggerResponse({ success: false, message: 'Network error: Could not connect to the server (Is Node server running?).' });
Â  Â  Â  Â  } finally {
Â  Â  Â  Â  Â  Â  setLoading(false);
Â  Â  Â  Â  }
Â  Â  };

Â  Â  // Handler for the navigation button
Â  Â  const navigateToDashboard = () => {
Â  Â  Â  Â  navigate('/assistance-dashboard'); 
Â  Â  };

Â  Â  // --- PROFESSIONAL STYLES (Focus ring and standard button now use green-700) ---
Â  Â  const inputClass = "w-full border border-gray-300 p-3 rounded-lg focus:ring-2 focus:ring-green-700 focus:border-green-700 transition duration-200 shadow-sm";
Â  Â  const labelClass = "block text-sm font-medium text-gray-700 mb-1";
Â  Â  // Changed to green-700, the primary branding color
Â  Â  const dashboardButtonClass = "w-full bg-green-700 text-white font-semibold py-3 rounded-lg shadow-md hover:bg-green-800 focus:outline-none focus:ring-4 focus:ring-green-500 focus:ring-opacity-50 transition duration-200 flex items-center justify-center";

Â  Â  // --- EMERGENCY ACCENT COLOR ---
Â  Â  const emergencyColor = "red-700";

Â  Â  return (
Â  Â  Â  Â  // Main container background: bg-green-100
Â  Â  Â  Â  <div className="flex flex-col min-h-screen bg-green-100">
Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  {/* 1. Header Component */}
Â  Â  Â  Â  Â  Â  <AppHeader />
Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  {/* 2. Main Content Area */}
Â  Â  Â  Â  Â  Â  <main className="flex-grow p-8 flex justify-center items-center"> {/* Changed items-start to items-center for slightly better centering on tall screens */}
Â  Â  Â  Â  Â  Â  Â  Â  <div className="w-full max-w-lg mx-auto space-y-6">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {/* EMERGENCY TRIGGER FORM (Accent red-700 for high alert) */}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className={`bg-white rounded-xl shadow-2xl overflow-hidden p-10 border-t-8 border-${emergencyColor}`}>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="text-center mb-8">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <FireIcon className={`h-12 w-12 text-${emergencyColor} mx-auto mb-3 animate-pulse`} /> {/* Icon size increased for impact */}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <h2 className={`text-3xl font-extrabold text-${emergencyColor} tracking-tight`}>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Emergency Protocol Activation
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </h2>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <p className="text-gray-500 mt-2 text-md">Trigger immediate data sharing for disaster relief claims.</p>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <form onSubmit={handleTrigger} className="space-y-6">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {/* Input fields use green-700 for non-emergency focus */}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <label htmlFor="village" className={labelClass}>Affected Village Name</label>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <input
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  id="village"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  type="text"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  placeholder="E.g., Shendurjane or Kumtha"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  value={village}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onChange={(e) => setVillage(e.target.value)}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  required
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  className={inputClass}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <label htmlFor="disasterType" className={labelClass}>Disaster Type (Act of God)</label>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <select
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  id="disasterType"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  value={disasterType}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onChange={(e) => setDisasterType(e.target.value)}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  required
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  className={`${inputClass} bg-white appearance-none`}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <option value="">Select Disaster Type...</option>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <option value="Flood">Flood</option>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <option value="Earthquake">Earthquake</option>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <option value="Tsunami">Tsunami</option>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <option value="Cyclone">Cyclone</option>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </select>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <label htmlFor="severity" className={labelClass}>Severity</label>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <select
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  id="severity"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  value={severity}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onChange={(e) => setSeverity(e.target.value)}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  className={`${inputClass} bg-white appearance-none`}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <option value="Low">Low</option>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <option value="Medium">Medium</option>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <option value="High">High</option>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <option value="Critical">Critical</option>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </select>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {/* Emergency Button uses red-700 */}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  type="submit"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  disabled={loading}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  className={`w-full bg-${emergencyColor} text-white font-extrabold uppercase py-3 rounded-lg shadow-2xl hover:bg-red-800 focus:outline-none focus:ring-4 focus:ring-red-500 focus:ring-opacity-70 transition duration-200 disabled:bg-red-400 disabled:shadow-none tracking-wider`}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {loading ? 'SENDING ALERT...' : 'ACTIVATE EMERGENCY PROTOCOL'}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </form>

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {/* Response Confirmation (Success/Failure) */}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {triggerResponse && (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className={`mt-8 p-5 rounded-xl border-l-4 ${triggerResponse.success ? 'bg-green-50 border-green-700' : 'bg-red-50 border-red-700'}`}>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <h3 className="font-bold text-xl text-gray-800 mb-2 flex items-center">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {triggerResponse.success 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  ? <CheckCircleIcon className="h-6 w-6 text-green-700 mr-2" /> 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  : <XCircleIcon className="h-6 w-6 text-red-700 mr-2" />
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {triggerResponse.success ? 'Action Successful!' : 'Action Failed!'}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </h3>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <p className="text-gray-700 text-sm pl-8">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {triggerResponse.success 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  ? `Trigger activated for **${triggerResponse.village}** (${triggerResponse.disasterType}, ${triggerResponse.severity}). ${triggerResponse.message}`
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  : `Error: ${triggerResponse.message}`
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </p>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {/* NAVIGATION BUTTON (Now uses green-700) */}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="w-full bg-white p-6 rounded-xl shadow-xl border border-gray-200">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <h3 className="text-lg font-semibold text-gray-800 mb-3 flex items-center">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <ArrowRightIcon className="h-5 w-5 text-green-700 mr-2" />
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Assistance Dashboard
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </h3>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <p className="text-gray-600 text-sm mb-4">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  For regular government schemes, financial claims, and status tracking services.
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </p>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onClick={navigateToDashboard}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  className={dashboardButtonClass}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Go to Dashboard
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>

Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  </main>

Â  Â  Â  Â  Â  Â  {/* 3. Footer Component */}
Â  Â  Â  Â  Â  Â  <AppFooter />

Â  Â  Â  Â  </div>
Â  Â  );
};

export default GovAssistance;